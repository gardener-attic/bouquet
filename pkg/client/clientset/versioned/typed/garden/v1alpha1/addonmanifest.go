/*
Copyright 2018 (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/bouquet/pkg/apis/garden/v1alpha1"
	scheme "github.com/gardener/bouquet/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AddonManifestsGetter has a method to return a AddonManifestInterface.
// A group's client should implement this interface.
type AddonManifestsGetter interface {
	AddonManifests(namespace string) AddonManifestInterface
}

// AddonManifestInterface has methods to work with AddonManifest resources.
type AddonManifestInterface interface {
	Create(*v1alpha1.AddonManifest) (*v1alpha1.AddonManifest, error)
	Update(*v1alpha1.AddonManifest) (*v1alpha1.AddonManifest, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AddonManifest, error)
	List(opts v1.ListOptions) (*v1alpha1.AddonManifestList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AddonManifest, err error)
	AddonManifestExpansion
}

// addonManifests implements AddonManifestInterface
type addonManifests struct {
	client rest.Interface
	ns     string
}

// newAddonManifests returns a AddonManifests
func newAddonManifests(c *GardenV1alpha1Client, namespace string) *addonManifests {
	return &addonManifests{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the addonManifest, and returns the corresponding addonManifest object, and an error if there is any.
func (c *addonManifests) Get(name string, options v1.GetOptions) (result *v1alpha1.AddonManifest, err error) {
	result = &v1alpha1.AddonManifest{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("addonmanifests").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AddonManifests that match those selectors.
func (c *addonManifests) List(opts v1.ListOptions) (result *v1alpha1.AddonManifestList, err error) {
	result = &v1alpha1.AddonManifestList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("addonmanifests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested addonManifests.
func (c *addonManifests) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("addonmanifests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a addonManifest and creates it.  Returns the server's representation of the addonManifest, and an error, if there is any.
func (c *addonManifests) Create(addonManifest *v1alpha1.AddonManifest) (result *v1alpha1.AddonManifest, err error) {
	result = &v1alpha1.AddonManifest{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("addonmanifests").
		Body(addonManifest).
		Do().
		Into(result)
	return
}

// Update takes the representation of a addonManifest and updates it. Returns the server's representation of the addonManifest, and an error, if there is any.
func (c *addonManifests) Update(addonManifest *v1alpha1.AddonManifest) (result *v1alpha1.AddonManifest, err error) {
	result = &v1alpha1.AddonManifest{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("addonmanifests").
		Name(addonManifest.Name).
		Body(addonManifest).
		Do().
		Into(result)
	return
}

// Delete takes name of the addonManifest and deletes it. Returns an error if one occurs.
func (c *addonManifests) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("addonmanifests").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *addonManifests) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("addonmanifests").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched addonManifest.
func (c *addonManifests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AddonManifest, err error) {
	result = &v1alpha1.AddonManifest{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("addonmanifests").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
