/*
Copyright 2018 (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/bouquet/pkg/apis/garden/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddonManifestLister helps list AddonManifests.
type AddonManifestLister interface {
	// List lists all AddonManifests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AddonManifest, err error)
	// AddonManifests returns an object that can list and get AddonManifests.
	AddonManifests(namespace string) AddonManifestNamespaceLister
	AddonManifestListerExpansion
}

// addonManifestLister implements the AddonManifestLister interface.
type addonManifestLister struct {
	indexer cache.Indexer
}

// NewAddonManifestLister returns a new AddonManifestLister.
func NewAddonManifestLister(indexer cache.Indexer) AddonManifestLister {
	return &addonManifestLister{indexer: indexer}
}

// List lists all AddonManifests in the indexer.
func (s *addonManifestLister) List(selector labels.Selector) (ret []*v1alpha1.AddonManifest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonManifest))
	})
	return ret, err
}

// AddonManifests returns an object that can list and get AddonManifests.
func (s *addonManifestLister) AddonManifests(namespace string) AddonManifestNamespaceLister {
	return addonManifestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddonManifestNamespaceLister helps list and get AddonManifests.
type AddonManifestNamespaceLister interface {
	// List lists all AddonManifests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AddonManifest, err error)
	// Get retrieves the AddonManifest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AddonManifest, error)
	AddonManifestNamespaceListerExpansion
}

// addonManifestNamespaceLister implements the AddonManifestNamespaceLister
// interface.
type addonManifestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AddonManifests in the indexer for a given namespace.
func (s addonManifestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AddonManifest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonManifest))
	})
	return ret, err
}

// Get retrieves the AddonManifest from the indexer for a given namespace and name.
func (s addonManifestNamespaceLister) Get(name string) (*v1alpha1.AddonManifest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addonmanifest"), name)
	}
	return obj.(*v1alpha1.AddonManifest), nil
}
