/*
Copyright 2018 (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/bouquet/pkg/apis/garden/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddonInstanceLister helps list AddonInstances.
type AddonInstanceLister interface {
	// List lists all AddonInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AddonInstance, err error)
	// AddonInstances returns an object that can list and get AddonInstances.
	AddonInstances(namespace string) AddonInstanceNamespaceLister
	AddonInstanceListerExpansion
}

// addonInstanceLister implements the AddonInstanceLister interface.
type addonInstanceLister struct {
	indexer cache.Indexer
}

// NewAddonInstanceLister returns a new AddonInstanceLister.
func NewAddonInstanceLister(indexer cache.Indexer) AddonInstanceLister {
	return &addonInstanceLister{indexer: indexer}
}

// List lists all AddonInstances in the indexer.
func (s *addonInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.AddonInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonInstance))
	})
	return ret, err
}

// AddonInstances returns an object that can list and get AddonInstances.
func (s *addonInstanceLister) AddonInstances(namespace string) AddonInstanceNamespaceLister {
	return addonInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddonInstanceNamespaceLister helps list and get AddonInstances.
type AddonInstanceNamespaceLister interface {
	// List lists all AddonInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AddonInstance, err error)
	// Get retrieves the AddonInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AddonInstance, error)
	AddonInstanceNamespaceListerExpansion
}

// addonInstanceNamespaceLister implements the AddonInstanceNamespaceLister
// interface.
type addonInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AddonInstances in the indexer for a given namespace.
func (s addonInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AddonInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonInstance))
	})
	return ret, err
}

// Get retrieves the AddonInstance from the indexer for a given namespace and name.
func (s addonInstanceNamespaceLister) Get(name string) (*v1alpha1.AddonInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addoninstance"), name)
	}
	return obj.(*v1alpha1.AddonInstance), nil
}
