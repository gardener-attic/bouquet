/*
Copyright 2018 (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	gardenv1alpha1 "github.com/gardener/bouquet/pkg/apis/garden/v1alpha1"
	versioned "github.com/gardener/bouquet/pkg/client/clientset/versioned"
	internalinterfaces "github.com/gardener/bouquet/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/gardener/bouquet/pkg/client/listers/garden/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// AddonManifestInformer provides access to a shared informer and lister for
// AddonManifests.
type AddonManifestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.AddonManifestLister
}

type addonManifestInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewAddonManifestInformer constructs a new informer for AddonManifest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAddonManifestInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAddonManifestInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredAddonManifestInformer constructs a new informer for AddonManifest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAddonManifestInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GardenV1alpha1().AddonManifests(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GardenV1alpha1().AddonManifests(namespace).Watch(options)
			},
		},
		&gardenv1alpha1.AddonManifest{},
		resyncPeriod,
		indexers,
	)
}

func (f *addonManifestInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAddonManifestInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *addonManifestInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&gardenv1alpha1.AddonManifest{}, f.defaultInformer)
}

func (f *addonManifestInformer) Lister() v1alpha1.AddonManifestLister {
	return v1alpha1.NewAddonManifestLister(f.Informer().GetIndexer())
}
